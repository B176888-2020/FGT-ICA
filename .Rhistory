pointsize = 4)
op <- par(mfrow = c(2,3))
for (i in 1:length(dfPhenoData$sample)){
image(chipP, which = i, type = 'resids', main = rownames(dfPhenoData)[i])
}
dev.off()
}
} else {
print("Skip: The number of samples is larger than 6. Skip microarray pictures")
}
} else {
print("Skip: Skip microarray and chip pseudo images as arguments.")
}
chipP = fitPLM(mydata)
png(paste(dirOutput, "all_resids.png", sep = ""),
width     = 4,
height    = 3,
units     = "in",
res       = 600,
pointsize = 4)
op <- par(mfrow = c(2,3))
for (i in 1:length(dfPhenoData$sample)){
image(chipP, which = i, type = 'resids', main = rownames(dfPhenoData)[i])
}
dev.off()
dirOutput = "./"
save.image("~/0Exam/FGT-ICA/wPLM.RData")
View(chipP)
png(paste(dirOutput, "all_resids.png", sep = ""),
width     = 4,
height    = 3,
units     = "in",
res       = 600,
pointsize = 4)
op <- par(mfrow = c(2,3))
for (i in 1:length(dfPhenoData$sample)){
image(chipP, which = i, type = 'resids', main = rownames(dfPhenoData)[i])
}
dev.off()
myIndexes <-rownames(myresults[1:40,])
plotme <-exprs(eset)[myIndexes,]
# Packages
## Array Statistics pkgs
library(limma)
library(affy)
library(annotate)
library(mouse4302.db)  # load chip-specific annotation
## Visualisation pkgs
library(ggplot2)
library(affyPLM)  # Chip pseudo images
library(scatterplot3d)
library(pheatmap)  # Heat map
myIndexes <-rownames(myresults[1:40,])
plotme <-exprs(eset)[myIndexes,]
pheatmap(plotme,scale="row")
png(paste(dirOutput, "heatmap.png", sep = ""),
width     = 4,
height    = 3,
units     = "in",
res       = 600,
pointsize = 4)
pheatmap(plotme,scale="row")
dev.off()
getwd()
dirOutput
png(paste(dirOutput, "heatmap.png", sep = ""),
width     = 4,
height    = 3,
units     = "in",
res       = 600,
pointsize = 4)
pheatmap(plotme,scale="row")
dev.off()
png(paste(dirOutput, "heatmap.png", sep = ""),
width     = 8,
height    = 6,
units     = "in",
res       = 300,
pointsize = 4)
pheatmap(plotme,scale="row")
dev.off()
png(paste(dirOutput, "heatmap.png", sep = ""),
width     = 8,
height    = 6,
units     = "in",
res       = 300)
pheatmap(plotme,scale="row")
dev.off()
#Use help for other parameters. Note we might decide to use #exactly the same model as our differential gene analysis for #the enrichment analysis- in this case we can extract it from #the fit
sv <- squeezeVar(fit$sigma^2,df=fit$df.residual)
sv
View(sv)
View(fit)
sv <- squeezeVar(fit$sigma^2, df=fit$df.residual)
write.table(sv, paste(dirOutput, "sv.txt", sep = ""))
print(paste("Output: Bayes variances Table - saved in", dirOutput))
calls <-mas5calls(mydata)
calls <- exprs(calls)
absent <- colSums(calls == 'A')
present <-colSums(calls=='P')
rownames(dfPhenoData)
present_absent <- cbind(rownames(dfPhenoData), absent, present, expr)
View(present_absent)
present_absent <- cbind(rownames(dfPhenoData), absent, present, callls)
present_absent <- cbind(rownames(dfPhenoData), absent, present, calls)
present_absent <- cbind(rownames(dfPhenoData), absent, present)
write.table(myresults, paste(dirOutput, "myresults.txt", sep = ""))
calls <-mas5calls(mydata)
calls <- exprs(calls)
absent <- colSums(calls == 'A')
present <-colSums(calls=='P')
present_absent <- cbind(rownames(dfPhenoData), absent, present)
write.table(present_absent, paste(dirOutput, "present_absent.txt", sep = ""))
print(paste("Output: Present_absent Table - saved in", dirOutput))
print("Process: Print the boxplot after normalisation...")
if (is.null(sampleGroup)){
# Normal box plot
png(paste(dirOutput, "all_boxplot_normalised.png", sep = ""),
width     = 4,
height    = 3,
units     = "in",
res       = 600,
pointsize = 4)
boxplot(values, col = 'white', xaxt = "n")
} else {
# Box plot with groups
png(paste(dirOutput, "all_boxplot_normalised.png", sep = ""),
width     = 4,
height    = 3,
units     = "in",
res       = 600,
pointsize = 4)
boxplot(values, col = lsColours, xaxt = "n")
}
# Add axis text with angel
text(seq_along(mydata), par("usr")[3] - 0.5, labels = rownames(dfPhenoData),
srt = 20, adj = 1, xpd = TRUE, cex = 0.8)  # angle, position and size
dev.off()
png(paste(dirOutput, "all_maplot_normalised.png", sep = ""),
width     = 4,
height    = 3,
units     = "in",
res       = 600,
pointsize = 4)
mva.pairs(values)
dev.off()
expr_diff <- abs(expr_control-1)
if (is.null(sampleGroup)){
print("Skip: fold table need sample group information.")
} else {
controlGroup <- rownames(dfPhenoData)[which(dfPhenoData$sample == unique(sampleGroup)[1])]
exprGroup <- rownames(dfPhenoData)[which(dfPhenoData$sample == unique(sampleGroup)[2])]
control.mean <- apply(exprsvals10[,controlGroup],1,mean)
expr.mean <- apply(exprsvals10[,exprGroup],1,mean)
#calculate some fold changes
expr_control <-expr.mean/control.mean
expr_diff <- abs(expr_control-1)
#build a summary table to hold all the data
all.data <- cbind(control.mean, expr.mean, expr_control, expr_diff)
dfAllData <- as.data.frame(all.data)[order(as.data.frame(all.data)$expr_diff), ]
# check the column names
colnames(dfAllData)
# write the table of means as an output
write.table(all.data, file=paste(dirOutput, "group_means.txt", sep = ""),
quote = F, sep = "\t", col.names=NA)
write.table(dfAllData, file=paste(dirOutput, "group_means_diff.txt", sep = ""),
quote = F, sep = "\t", col.names=NA)
print(paste("Output: Fold table - saved in", dirOutput))
}
if (is.null(sampleGroup)){
print("Skip: fold table need sample group information.")
} else {
controlGroup <- rownames(dfPhenoData)[which(dfPhenoData$sample == unique(sampleGroup)[1])]
exprGroup <- rownames(dfPhenoData)[which(dfPhenoData$sample == unique(sampleGroup)[2])]
control.mean <- apply(exprsvals10[,controlGroup],1,mean)
expr.mean <- apply(exprsvals10[,exprGroup],1,mean)
#calculate some fold changes
expr_control <-expr.mean/control.mean
expr_diff <- abs(expr_control-1)
#build a summary table to hold all the data
all.data <- cbind(control.mean, expr.mean, expr_control, expr_diff)
dfAllData <- as.data.frame(all.data)[order(as.data.frame(all.data)$expr_diff, decreasing = TRUE), ]
# check the column names
colnames(dfAllData)
# write the table of means as an output
write.table(all.data, file=paste(dirOutput, "group_means.txt", sep = ""),
quote = F, sep = "\t", col.names=NA)
write.table(dfAllData, file=paste(dirOutput, "group_means_diff.txt", sep = ""),
quote = F, sep = "\t", col.names=NA)
print(paste("Output: Fold table - saved in", dirOutput))
}
#Note mean of the log is not the same as the log of the mean!!
if (is.null(sampleGroup)){
print("Skip: fold table need sample group information.")
} else {
controlGroup <- rownames(dfPhenoData)[which(dfPhenoData$sample == unique(sampleGroup)[1])]
exprGroup <- rownames(dfPhenoData)[which(dfPhenoData$sample == unique(sampleGroup)[2])]
control.mean <- apply(exprsvals10[,controlGroup],1,mean)
expr.mean <- apply(exprsvals10[,exprGroup],1,mean)
#calculate some fold changes
expr_control <-expr.mean/control.mean
expr_diff <- abs(expr_control-1)
#build a summary table to hold all the data
all.data <- cbind(control.mean, expr.mean, expr_control)
dfAllData <- as.data.frame(all.data)[order(as.data.frame(all.data)$expr_control, decreasing = TRUE), ]
# check the column names
colnames(dfAllData)
# write the table of means as an output
write.table(all.data, file=paste(dirOutput, "group_means.txt", sep = ""),
quote = F, sep = "\t", col.names=NA)
write.table(dfAllData, file=paste(dirOutput, "group_means_diff.txt", sep = ""),
quote = F, sep = "\t", col.names=NA)
print(paste("Output: Fold table - saved in", dirOutput))
}
myresults_logFC <-topTable(fit2,coef=1, adjust="fdr", number=nrow(eset), sort.by = "logFC")
source('~/0Exam/FGT-ICA/BasicAnalysisScript.R', echo=TRUE)
myresults_LFC <-topTable(fit2,coef=1, adjust="fdr", number=nrow(eset), sort.by = "logFC")
write.table(myresults_LFC, paste(dirOutput, "myresults_LFC.txt", sep = ""))
class(myresults)
myresults$logFC
order(abs(myresults$logFC), decreasing = TRUE)
myresults_LFC <- myresults[order(abs(myresults$logFC), decreasing = TRUE), ]
write.table(myresults_LFC, paste(dirOutput, "myresults_LFC.txt", sep = ""))
myresults_LFC <- topTable(fit2,coef=1, adjust="fdr", number=nrow(eset), sort.by = "logFC")
write.table(myresults_LFC, paste(dirOutput, "myresults_LFC.txt", sep = ""))
# pHeatmap
myIndexes <-rownames(myresults[1:40,])
myIndexes_LFC <-rownames(myresults_LFC[1:40,])
plotme <-exprs(eset)[myIndexes,]
plotme_LFC <-exprs(eset)[myIndexes_LFC,]
png(paste(dirOutput, "heatmap.png", sep = ""),
width     = 8,
height    = 6,
units     = "in",
res       = 300)
pheatmap(plotme,scale="row")
dev.off()
png(paste(dirOutput, "heatmap_LFC.png", sep = ""),
width     = 8,
height    = 6,
units     = "in",
res       = 300)
pheatmap(plotme_LFC,scale="row")
dev.off()
View(eset)
View(eset_t)
View(H.indices)
View(res)
fData(eset)
res[idx, ]
head(fData(eset), 10)
View(H.indices)
eset_t
eset
fData(eset_t)[10,]
fData(eset_t)[1:10,]
fData(eset_t)$ENTREZID
fData(eset_t)[1:10,]
H.indices
interGeneCorrelation(eset_t, design)
View(eset_t)
fData(eset_t)
write.table(fData(eset_t),paste(dirOutput, func_enrich, "_eset_t.txt", sep = ""),sep="\t")
func_enrich = "camera"
write.table(fData(eset_t),paste(dirOutput, func_enrich, "_eset_t.txt", sep = ""),sep="\t")
write.table(fData(eset_t),paste(dirOutput, func_enrich, "_eset_t.txt", sep = ""), sep="\t", row.names = FALSE)
View(H.indices)
H.indices
write.table(H.indices,paste(dirOutput, func_enrich, "_eset_t.txt", sep = ""), sep="\t")
length(H.indices)
names(H.indices)
df <- data.frame()
dfHIndex <- data.frame()
lsName <-  names(H.indices)[1]
lsName
dfHIndex <- data.frame()
for (lsName in names(H.indices)) {
df <- H.indices$lsName
dfHIndex <- cbind(dfHIndex, df)
}
View(dfHIndex)
H.indices$lsName
lsName
H.indices$lsName
names(H.indices)
H.indices$names(H.indices)[1]
H.indices$(names(H.indices)[1])
(names(H.indices)[1])
H.indices$names(H.indices)[1]
H.indices$"HALLMARK_KRAS_SIGNALING_DN"
names(H.indices)[1]
H.indices$"HALLMARK_KRAS_SIGNALING_DN"
lsName <- names(H.indices)[1]
H.indices$lsName
lsName <- as.character(names(H.indices)[1])
H.indices$lsName
names(H.indices)[1]
H.indices$"HALLMARK_TNFA_SIGNALING_VIA_NFKB"
H.indices$lsName
lsName
eval(parse(text=paste("H.indices$", lsName, sep = "")))
df <- eval(parse(text=paste("H.indices$", lsName, sep = "")))
df <- rbind(df, rep(lsName, length(df)))
View(df)
df <- eval(parse(text=paste("H.indices$", lsName, sep = "")))
df <- cbind(df, rep(lsName, length(df)))
dfHIndex <- data.frame()
for (lsName in names(H.indices)) {
df <- eval(parse(text=paste("H.indices$", lsName, sep = "")))
df <- cbind(ENTREZID=df, path=rep(lsName, length(df)))
dfHIndex <- rbind(dfHIndex, df)
}
write.table(dfHIndex,paste(dirOutput, func_enrich, "_index.txt", sep = ""), sep="\t")
View(eset_t)
# Data frame combination pkg
library(tidyr)
View(dfHIndex)
View(eset_t)
fData(eset_t)
dfFinal <- left_join(fData(eset_t), dfHIndex, by = c("ENTREZID" = "ENTREZID"))
# Data frame combination pkg
library(dplyr)
dfFinal <- left_join(fData(eset_t), dfHIndex, by = c("ENTREZID" = "ENTREZID"))
View(dfFinal)
myresults_LFC <- topTable(fit2,coef=1, adjust="fdr", number=nrow(eset), sort.by = "logFC")
dfFinal <- left_join(dfFinal, myresults_LFC, by = c("PROBEID" = "ID"))
View(dfFinal)
dfFinal <- left_join(dfFinal, myresults, by = c("PROBEID" = "ID"))
dfHIndex <- data.frame()
for (lsName in names(H.indices)) {
df <- eval(parse(text=paste("H.indices$", lsName, sep = "")))
df <- cbind(ENTREZID=df, path=rep(lsName, length(df)))
dfHIndex <- rbind(dfHIndex, df)
}
dfFinal <- left_join(fData(eset_t), dfHIndex, by = c("ENTREZID" = "ENTREZID"))
dfFinal <- left_join(dfFinal, myresults, by = c("PROBEID" = "ID"))
View(dfFinal)
write.table(dfHIndex,paste(dfFinal, func_enrich, "_index.txt", sep = ""), sep="\t", row.names = FALSE)
write.table(dfFinal,paste(dirOutput, func_enrich, "_index.txt", sep = ""), sep="\t", row.names = FALSE)
# Generate tables for specific functionality
dfSPFunc <- dfFinal[which(dfFinal$path == "HALLMARK_MYOGENESIS"),]
functionality = "HALLMARK_MYOGENESIS"
# Generate tables for specific functionality
dfSPFunc <- dfFinal[which(dfFinal$path == functionality),]
dfSPFunc <- dfSPFunc[order(dfSPFunc$P.Value), ]
write.table(dfFinal,paste(dirOutput, func_enrich, functionality, "_index.txt", sep = ""), sep="\t", row.names = FALSE)
functionality
write.table(dfSPFunc,paste(dirOutput, func_enrich, functionality, "_index.txt", sep = ""), sep="\t", row.names = FALSE)
# Generate tables for specific functionality
dfSPFunc <- dfFinal[which(dfFinal$path == functionality),]
View(dfSPFunc)
dfSPFunc <- dfSPFunc[order(dfSPFunc$P.Value), ]
View(dfSPFunc)
write.table(dfSPFunc, paste(dirOutput, func_enrich, functionality, "_index.txt", sep = ""), sep="\t", row.names = FALSE)
View(dfSPFunc)
View(myresults)
# Match top ten with table of the specific functionality
left_join(myresults[1:10, ], dfSPFunc, by = c("ID" = "PROBEID"))
# Match top ten with table of the specific functionality
df10 <- left_join(myresults[1:10, ], dfSPFunc, by = c("ID" = "PROBEID"))
View(df10)
View(dfSPFunc)
# Match top ten with table of the specific functionality
df10 <- left_join(myresults_LFC[1:10, ], dfSPFunc, by = c("ID" = "PROBEID"))
#View the results
results
write.table(results,paste(dirOutput, func_enrich, "_enrichment.txt", sep = ""), sep="\t")
# index table for trace back
dfHIndex <- data.frame()
for (lsName in names(H.indices)) {
df <- eval(parse(text=paste("H.indices$", lsName, sep = "")))
df <- cbind(ENTREZID=df, path=rep(lsName, length(df)))
dfHIndex <- rbind(dfHIndex, df)
}
dfFinal <- left_join(fData(eset_t), dfHIndex, by = c("ENTREZID" = "ENTREZID"))
dfFinal <- left_join(myresults_LFC, dfFinal, by = c("ID" = "PROBEID"))
write.table(dfFinal,paste(dirOutput, func_enrich, "_index.txt", sep = ""), sep="\t", row.names = FALSE)
# Generate tables for specific functionality
dfSPFunc <- dfFinal[which(dfFinal$path == functionality),]
#dfSPFunc <- dfSPFunc[order(dfSPFunc$P.Value), ]
write.table(dfSPFunc, paste(dirOutput, func_enrich, functionality, "_index.txt", sep = ""), sep="\t", row.names = FALSE)
# Match top ten with table of the specific functionality
#df10 <- left_join(myresults_LFC[1:10, ], dfSPFunc, by = c("ID" = "PROBEID"))
print(paste("Output: Functional Enrichment Tables - saved in", dirOutput))
#dfSPFunc <- dfSPFunc[order(dfSPFunc$P.Value), ]
write.table(dfSPFunc, paste(dirOutput, func_enrich, functionality, "_index.txt", sep = ""), sep="\t", row.names = FALSE)
#dfSPFunc <- dfSPFunc[order(dfSPFunc$P.Value), ]
write.table(dfSPFunc, paste(dirOutput, func_enrich, functionality, "_index.txt", sep = ""), sep="\t", row.names = FALSE)
write.table(dfFinal,paste(dirOutput, func_enrich, "_index.txt", sep = ""), sep="\t", row.names = FALSE)
# Match top ten with table of the specific functionality
df10 <- left_join(myresults_LFC[1:10, ], dfFinal, by = c("ID" = "PROBEID"))
View(dfFinal)
# Match top ten with table of the specific functionality
df10 <- left_join(myresults_LFC[1:10, ], dfFinal, by = c("ID" = "ID"))
View(df10)
# Match top ten with table of the specific functionality
df10_LFC <- left_join(myresults_LFC[1:10, ], dfFinal, by = c("ID" = "ID"))
# Match top ten with table of the specific functionality
df10 <- left_join(myresults[1:10, ], dfFinal, by = c("ID" = "ID"))
View(df10_LFC)
View(df10)
write.table(df10_LFC, paste(dirOutput, func_enrich, functionality, "_top10.txt", sep = ""), sep="\t", row.names = FALSE)
#View the results
results
write.table(results,paste(dirOutput, func_enrich, "_enrichment.txt", sep = ""), sep="\t")
# index table for trace back
dfHIndex <- data.frame()
for (lsName in names(H.indices)) {
df <- eval(parse(text=paste("H.indices$", lsName, sep = "")))
df <- cbind(ENTREZID=df, path=rep(lsName, length(df)))
dfHIndex <- rbind(dfHIndex, df)
}
dfFinal <- left_join(fData(eset_t), dfHIndex, by = c("ENTREZID" = "ENTREZID"))
dfFinal <- left_join(myresults_LFC, dfFinal, by = c("ID" = "PROBEID"))
write.table(dfFinal,paste(dirOutput, func_enrich, "_index.txt", sep = ""), sep="\t", row.names = FALSE)
# Generate tables for specific functionality
dfSPFunc <- dfFinal[which(dfFinal$path == functionality),]
#dfSPFunc <- dfSPFunc[order(dfSPFunc$P.Value), ]
write.table(dfSPFunc, paste(dirOutput, func_enrich, functionality, "_index.txt", sep = ""), sep="\t", row.names = FALSE)
# Match top ten with table of the specific functionality
df10 <- left_join(myresults[1:10, ], dfFinal, by = c("ID" = "ID"))
df10_LFC <- left_join(myresults_LFC[1:10, ], dfFinal, by = c("ID" = "ID"))
write.table(df10_LFC, paste(dirOutput, func_enrich, "_top10.txt", sep = ""), sep="\t", row.names = FALSE)
print(paste("Output: Functional Enrichment Tables - saved in", dirOutput))
#You can then examine the results in “enrichment.txt”.  It is a text file.  It can be downloaded to view in a spreadsheet such as Excel.
# Match top ten with table of the specific functionality
df10 <- left_join(myresults[1:10, ], dfFinal, by = c("ID" = "ID"))
df10_LFC <- left_join(myresults_LFC[1:10, ], dfFinal, by = c("ID" = "ID"))
save.image("~/0Exam/FGT-ICA/shiny/Affy.RData")
sidebar <- dashboardSidebar(
width = 300,
sidebarMenu(id="sidername",selected='qc',
menuItem(strong("Quality Control"), tabName = "qc"),
menuItem(strong("Differential Expression"), tabName = "de"),
menuItem(strong("Functional Enrichment"), tabName = "fe"),
)
)
library(shinydashboard)
# Packages
## shinypackages
library(shiny)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(shinyBS)
library(shinyjs)
## Array Statistics pkgs
library(limma)
library(affy)
library(annotate)
library(mouse4302.db)  # load chip-specific annotation
# Data frame combination pkg
library(dplyr)
## Visualisation pkgs
library(ggplot2)
library(affyPLM)  # Chip pseudo images
library(scatterplot3d)
library(pheatmap)  # Heat map
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs), col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('shiny/ui_server.R')
runApp('shiny')
runApp('shiny/ui_server.R')
## shinypackages
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(shinyBS)
library(shinyjs)
## Array Statistics pkgs
library(limma)
library(affy)
library(annotate)
library(mouse4302.db)  # load chip-specific annotation
# Data frame combination pkg
library(dplyr)
## Visualisation pkgs
library(ggplot2)
library(affyPLM)  # Chip pseudo images
library(scatterplot3d)
library(pheatmap)  # H
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('ui_server.R')
runApp('ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny')
runApp('shiny/ui_server.R')
runApp('ui_server.R')
runApp('shiny/ui_server.R')
runApp('ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
runApp('shiny/ui_server.R')
save.image("~/0Exam/FGT-ICA/shiny/Affy2.RData")
